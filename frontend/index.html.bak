<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Workflow Automation Test</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
            background-color: #f5f5f5;
        }
        .container {
            background: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            margin-bottom: 20px;
        }
        h1, h2 {
            color: #333;
        }
        textarea, input {
            width: 100%;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 14px;
            box-sizing: border-box;
        }
        textarea {
            height: 100px;
            resize: vertical;
        }
        button {
            background: #007bff;
            color: white;
            padding: 10px 20px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 14px;
            margin-top: 10px;
        }
        button:hover {
            background: #0056b3;
        }
        button:disabled {
            background: #ccc;
            cursor: not-allowed;
        }
        .result {
            background: #f8f9fa;
            padding: 15px;
            border: 1px solid #e9ecef;
            border-radius: 4px;
            white-space: pre-wrap;
            font-family: monospace;
            font-size: 12px;
            max-height: 400px;
            overflow-y: auto;
        }
        .error {
            background: #ffe6e6;
            border-color: #ff9999;
            color: #cc0000;
        }
        .success {
            background: #e6ffe6;
            border-color: #99ff99;
            color: #006600;
        }
        .loading {
            color: #666;
            font-style: italic;
        }
        .workflow-info {
            background: #e7f3ff;
            padding: 10px;
            border-radius: 4px;
            margin: 10px 0;
        }
    </style>
</head>
<body>
    <h1>üöÄ Workflow Automation Test</h1>
    
    <!-- Step 1: Create Workflow -->
    <div class="container">
        <h2>1. Create Workflow</h2>
        <p>Describe a workflow using natural language:</p>
        <textarea id="workflowDescription" placeholder="Example: Search for documents about LightOn, then analyze those documents to summarize key information...">Search for documents about the user's question, then analyze those documents to provide a detailed summary.</textarea>
        <input type="text" id="workflowName" placeholder="Workflow name (optional)" />
        <button onclick="createWorkflow()">Create Workflow</button>
        <div id="workflowResult"></div>
    </div>

    <!-- Step 2: Test Workflow -->
    <div class="container">
        <h2>2. Test Workflow</h2>
        <p>Enter a query to test your workflow:</p>
        <input type="text" id="testQuery" placeholder="What is LightOn's main technology platform?" />
        <button onclick="testWorkflow()" id="testButton" disabled>Test Workflow</button>
        <div id="testResult"></div>
    </div>

    <script>
        const API_BASE = 'http://localhost:8000';
        let currentWorkflowId = null;

        async function createWorkflow() {
            const description = document.getElementById('workflowDescription').value.trim();
            const name = document.getElementById('workflowName').value.trim();
            const resultDiv = document.getElementById('workflowResult');
            
            if (!description) {
                showResult(resultDiv, 'Please enter a workflow description', 'error');
                return;
            }

            showResult(resultDiv, 'Creating workflow...', 'loading');

            try {
                const response = await fetch(`${API_BASE}/workflows`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        description: description,
                        name: name || null
                    })
                });

                const data = await response.json();

                if (response.ok) {
                    currentWorkflowId = data.id;
                    document.getElementById('testButton').disabled = false;
                    
                    showResult(resultDiv, 
                        `‚úÖ Workflow created successfully!\n\nID: ${data.id}\nName: ${data.name || 'Unnamed'}\nStatus: ${data.status}\n\nGenerated Code Preview:\n${data.generated_code?.substring(0, 500)}...`, 
                        'success'
                    );
                } else {
                    showResult(resultDiv, `‚ùå Error: ${data.detail || 'Failed to create workflow'}`, 'error');
                }
            } catch (error) {
                showResult(resultDiv, `‚ùå Network Error: ${error.message}`, 'error');
            }
        }

        async function testWorkflow() {
            if (!currentWorkflowId) {
                alert('Please create a workflow first');
                return;
            }

            const query = document.getElementById('testQuery').value.trim();
            const resultDiv = document.getElementById('testResult');
            
            if (!query) {
                showResult(resultDiv, 'Please enter a test query', 'error');
                return;
            }

            showResult(resultDiv, 'Executing workflow... (this may take up to 5 minutes for document analysis)', 'loading');

            try {
                const response = await fetch(`${API_BASE}/workflows/${currentWorkflowId}/execute`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        user_input: query
                    })
                });

                const data = await response.json();

                if (response.ok) {
                    const executionTime = data.execution_time ? `${data.execution_time.toFixed(2)}s` : 'N/A';
                    
                    if (data.status === 'completed') {
                        showResult(resultDiv, 
                            `‚úÖ Workflow executed successfully!\n\nExecution ID: ${data.execution_id}\nStatus: ${data.status}\nExecution Time: ${executionTime}\n\n=== RESULT ===\n${data.result}`, 
                            'success'
                        );
                    } else {
                        showResult(resultDiv, 
                            `‚ö†Ô∏è Workflow execution status: ${data.status}\n\nExecution ID: ${data.execution_id}\nExecution Time: ${executionTime}\nError: ${data.error || 'Unknown error'}`, 
                            'error'
                        );
                    }
                } else {
                    showResult(resultDiv, `‚ùå Error: ${data.detail || 'Failed to execute workflow'}`, 'error');
                }
            } catch (error) {
                showResult(resultDiv, `‚ùå Network Error: ${error.message}`, 'error');
            }
        }

        function showResult(element, message, type) {
            element.innerHTML = `<div class="result ${type}">${message}</div>`;
        }

        // Add example workflow descriptions on page load
        window.onload = function() {
            const examples = [
                "Search for documents about the user's question, then analyze those documents to provide a detailed summary.",
                "For each sentence in the user input, search for relevant documents, then format results as Question and Answer pairs.",
                "Search for documents, extract key information using chat completion, then analyze specific documents for deeper insights."
            ];
            
            // You can uncomment this to show examples
            // document.getElementById('workflowDescription').placeholder = examples[0];
        };
    </script>
</body>
</html>